import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import streamlit as st
from utils.toc import Toc

import os
# Add the parent directory to the system path
parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))


st.set_page_config(page_title="Housing Data Analysis",
                   page_icon=":chart_with_upwards_trend:",
                   layout="wide",
                   initial_sidebar_state="expanded")

# Custom CSS to keep sidebar always open and hide collapse button
st.markdown("""
<style>
    /* Hide the sidebar collapse button */
    .css-1d391kg {
        display: none;
    }
    
    /* Alternative selector for newer Streamlit versions */
    button[kind="header"][data-testid="baseButton-header"] {
        display: none;
    }
    
    /* Ensure sidebar stays expanded */
    .css-1lcbmhc {
        min-width: 244px !important;
        max-width: 244px !important;
    }
    
    /* Alternative for newer versions */
    section[data-testid="stSidebar"] {
        min-width: 244px !important;
        max-width: 244px !important;
    }
</style>
""", unsafe_allow_html=True)


def _max_width_(prcnt_width: int = 70):
    max_width_str = f"max-width: {prcnt_width}%;"
    st.markdown(f"""
                <style>
                .appview-container .main .block-container{{{max_width_str}}}
                </style>
                """,
                unsafe_allow_html=True,
                )


_max_width_(70)
toc = Toc()

# Placeholder for the table of contents
toc.placeholder(sidebar=True)

# Title and navigation button
col_title, col_nav = st.columns([3, 1])
with col_title:
    toc.header("üß™ Ph√¢n t√≠ch d·ªØ li·ªáu g·ªëc")

with col_nav:
    if st.button("D·ª± ƒëo√°n gi√° nh√†", use_container_width=True):
        st.switch_page("housing_app.py")

# read data csv


@st.cache_data
def read_data(file_path: str):
    try:
        data = pd.read_csv(file_path)
        return data
    except Exception as e:
        st.error(f"Error reading the file: {e}")
        return None


data = read_data("data/vietnam_housing_dataset_final.csv")
# Drop index column if exists
data = data.drop(columns=['Unnamed: 0'], errors='ignore')
# Drop latitude and longitude if exists
data = data.drop(columns=['longitude', 'latitude',
                 'price_per_m2'], errors='ignore')
if data is not None:
    st.write("üìã D·ªØ li·ªáu g·ªëc:")
    st.dataframe(data)

    # Display basic statistics and missing values side by side
    col1, col2, col3 = st.columns(3)

    with col1:
        st.subheader("üìä Th·ªëng k√™ m√¥ t·∫£")
        st.write(data.describe())

    with col2:
        st.subheader("‚ùì Gi√° tr·ªã thi·∫øu")
        missing_values = data.isnull().sum()
        st.write(missing_values[missing_values > 0])
    # Display data types
    with col3:
        st.subheader("üî† Ki·ªÉu d·ªØ li·ªáu")
        data_types = data.dtypes
        st.write(data_types)
# display ph·∫ßn ph·ªëi gi√° nh√†
    toc.subheader("üìä Ph√¢n ph·ªëi gi√° nh√† (Histogram & Boxplot)")
    col1, col2 = st.columns(2)

    with col1:
        fig1, ax1 = plt.subplots()
        sns.histplot(data["Price"], bins=30,
                     kde=True, ax=ax1, color="skyblue")
        ax1.set_title("Histogram gi√° nh√†")
        st.pyplot(fig1)

    with col2:
        fig2, ax2 = plt.subplots()
        sns.boxplot(y=data["Price"], ax=ax2, color="orange")
        ax2.set_title("Boxplot gi√° nh√†")
        st.pyplot(fig2)
        # Outlier Detection and Removal

# Calculate IQR for Price column
    toc.subheader("üìä Ph√°t hi·ªán v√† lo·∫°i b·ªè outliers")
    Q1 = data['Price'].quantile(0.25)
    Q3 = data['Price'].quantile(0.75)
    IQR = Q3 - Q1

    # Define outlier bounds
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # Identify outliers
    outliers = data[(data['Price'] < lower_bound) |
                    (data['Price'] > upper_bound)]
    data_clean = data[(data['Price'] >= lower_bound) &
                      (data['Price'] <= upper_bound)]

    # Display information about outliers
    col1, col2 = st.columns(2)
    with col1:
        st.success(
            f"S·ªë l∆∞·ª£ng outliers: {len(outliers)} ({len(outliers)/len(data):.2%} c·ªßa d·ªØ li·ªáu)")
        st.write(f"Gi·ªõi h·∫°n d∆∞·ªõi: {lower_bound:,.0f}")
        st.write(f"Gi·ªõi h·∫°n tr√™n: {upper_bound:,.0f}")

    with col2:
        # Compare before and after distributions
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.histplot(data=data, x="Price", color="skyblue",
                     label="Tr∆∞·ªõc khi x√≥a", alpha=0.7, kde=True, ax=ax)
        sns.histplot(data=data_clean, x="Price", color="red",
                     label="Sau khi x√≥a", alpha=0.7, kde=True, ax=ax)
        plt.legend()
        plt.title("Ph√¢n ph·ªëi gi√° nh√† tr∆∞·ªõc v√† sau khi x√≥a outliers")
        st.pyplot(fig)
# X·ª≠ l√Ω address qua c√°c b∆∞·ªõc sau
    toc.header("üìç X·ª≠ l√Ω ƒë·ªãa ch·ªâ")
    st.success(
        "ƒê·ªãa ch·ªâ s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh t·ªça ƒë·ªô (latitude, longitude) ƒë·ªÉ ph√¢n t√≠ch ti·∫øp theo.")
    data_geo = read_data("data/vietnam_housing_dataset_final.csv")
    data_train = read_data("data/data_train.csv")

    data_geo = data_geo.drop(
        columns=['Unnamed: 0', 'Address'], errors='ignore')
    data_geo_copy = data_geo.copy().drop(
        columns=['price_per_m2'], errors='ignore')
    # display data_geo_copy
    if data_geo_copy is not None:
        st.write("üìã D·ªØ li·ªáu ƒë·ªãa l√Ω:")
        st.dataframe(data_geo_copy)
    st.success(
        "T·ª´ t·ªça ƒë·ªô (latitude, longitude) s·∫Ω t√¨m ƒë∆∞·ª£c gi√° nh√† trung b√¨nh quanh khu v·ª±c ƒë√≥.")
    if data_geo is not None:
        st.write("üìã D·ªØ li·ªáu ƒë·ªãa l√Ω:")
        data_geo = data_geo.drop(
            columns=['latitude', 'longitude', 'price_per_m2'], errors='ignore')
        # add columns avg_price_area
        # Check if avg_price_area exists in data_train before adding it
        if data_train is not None and 'avg_price_area' in data_train.columns:
            data_geo['avg_price_area'] = data_train['avg_price_area']
        else:
            st.warning(
                "Column 'avg_price_area' not found in data_train.csv. Skipping this step.")
            st.info("Available columns in data_train: " + str(list(data_train.columns)
                    if data_train is not None else "No data loaded"))

        st.dataframe(data_geo)
# x·ª≠ l√Ω missing values c·ªßa House direction vaf balcony direction,
    toc.header("üè† X·ª≠ l√Ω h∆∞·ªõng nh√† v√† ban c√¥ng")
    # s·ªë li·ªáu c√°c gi√° tr·ªã duy nh·∫•t c·ªßa House direction v√† Balcony direction
    house_directions = data_geo['House direction'].value_counts()
    balcony_directions = data_geo['Balcony direction'].value_counts()
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("H∆∞·ªõng nh√†")
        st.write(house_directions)
    with col2:
        st.subheader("H∆∞·ªõng ban c√¥ng")
        st.write(balcony_directions)
    # s·ªë l∆∞·ª£ng missing values c·ªßa House direction v√† Balcony direction
    missing_house_direction = data_geo['House direction'].isnull().sum()
    missing_balcony_direction = data_geo['Balcony direction'].isnull().sum()
    st.write(
        f"S·ªë l∆∞·ª£ng missing values c·ªßa House direction: {missing_house_direction}")
    st.write(
        f"S·ªë l∆∞·ª£ng missing values c·ªßa Balcony direction: {missing_balcony_direction}")
    # quy·∫øt ƒë·ªãnh x√≥a 2 column n√†y v√¨ s·ªë l∆∞·ª£ng missing values qu√° l·ªõn
    st.warning(
        "S·ªë l∆∞·ª£ng missing values c·ªßa House direction v√† Balcony direction qu√° l·ªõn, s·∫Ω x√≥a 2 c·ªôt n√†y.")
    data_geo = data_geo.drop(columns=['House direction', 'Balcony direction'])
    # hi·ªÉn th·ªã l·∫°i d·ªØ li·ªáu sau khi x√≥a
    st.write("üìã D·ªØ li·ªáu sau khi x√≥a:")
    st.dataframe(data_geo)

# X·ª≠ l√Ω Frontage v√† Access Road
    toc.header("üõ£Ô∏è X·ª≠ l√Ω Frontage v√† Access Road")
    # Hi·ªÉn th·ªã s·ªë li·ªáu duy nh·∫•t c·ªßa Frontage v√† Access Road
    col1, col2 = st.columns(2)
    with col1:
        toc.subheader("Frontage")
        st.write(data_geo['Frontage'].value_counts())
    with col2:
        toc.subheader("Access Road")
        st.write(data_geo['Access Road'].value_counts())
    # S·ªë l∆∞·ª£ng missing values c·ªßa Frontage v√† Access Road
    missing_frontage = data_geo['Frontage'].isnull().sum()
    missing_access_road = data_geo['Access Road'].isnull().sum()
    st.write(f"S·ªë l∆∞·ª£ng missing values c·ªßa Frontage: {missing_frontage}")
    st.write(f"S·ªë l∆∞·ª£ng missing values c·ªßa Access Road: {missing_access_road}")
    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi c·ªßa Frontage v√† Access Road v√† line gi√° tr·ªã c·ªßa nh√† trung b√¨nh n·∫øu c√πng trong m·ªôt Frontage v√† Access Road

    # T·∫°o data_geoFrame ch·ª©a gi√° trung b√¨nh theo Frontage
    frontage_avg_price = data_geo.groupby(
        'Frontage')['Price'].mean().reset_index()

    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi Frontage v√† gi√° trung b√¨nh
    toc.subheader("Ph√¢n ph·ªëi c·ªßa Frontage v√† gi√° trung b√¨nh")
    fig_frontage, ax_frontage = plt.subplots(figsize=(12, 6))

    # V·∫Ω countplot (ph√¢n ph·ªëi)
    sns.countplot(x='Frontage', data=data, ax=ax_frontage,
                  alpha=0.7, color='skyblue')
    ax_frontage.set_title('Ph√¢n ph·ªëi c·ªßa Frontage v√† gi√° nh√† trung b√¨nh')
    ax_frontage.set_xlabel('Frontage')
    ax_frontage.set_ylabel('S·ªë l∆∞·ª£ng')

    # T·∫°o tr·ª•c th·ª© hai cho gi√° trung b√¨nh
    ax2 = ax_frontage.twinx()

    # V·∫Ω line plot cho gi√° trung b√¨nh
    sns.lineplot(data=frontage_avg_price, x='Frontage', y='Price',
                 ax=ax2, color='red', marker='o', linewidth=2)
    ax2.set_ylabel('Gi√° trung b√¨nh (VND)', color='red')
    ax2.tick_params(axis='y', colors='red')

    # Th√™m gi√° tr·ªã trung b√¨nh l√™n ƒë∆∞·ªùng line
    for x, y in zip(frontage_avg_price['Frontage'], frontage_avg_price['Price']):
        ax2.annotate(f'{y:,.0f}', xy=(x, y), xytext=(0, 10),
                     textcoords='offset points', ha='center', va='bottom',
                     color='red', fontsize=8, rotation=45)

    plt.tight_layout()
    st.pyplot(fig_frontage)

    # T·∫°o DataFrame ch·ª©a gi√° trung b√¨nh theo Access Road
    access_road_avg_price = data_geo.groupby(
        'Access Road')['Price'].mean().reset_index()

    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi Access Road v√† gi√° trung b√¨nh
    toc.subheader("Ph√¢n ph·ªëi c·ªßa Access Road v√† gi√° trung b√¨nh")
    fig_access, ax_access = plt.subplots(figsize=(12, 6))

    # V·∫Ω countplot (ph√¢n ph·ªëi)
    sns.countplot(x='Access Road', data=data_geo, ax=ax_access,
                  alpha=0.7, color='lightgreen')
    ax_access.set_title('Ph√¢n ph·ªëi c·ªßa Access Road v√† gi√° nh√† trung b√¨nh')
    ax_access.set_xlabel('Access Road')
    ax_access.set_ylabel('S·ªë l∆∞·ª£ng')

    # T·∫°o tr·ª•c th·ª© hai cho gi√° trung b√¨nh
    ax2_access = ax_access.twinx()

    # V·∫Ω line plot cho gi√° trung b√¨nh
    sns.lineplot(data=access_road_avg_price, x='Access Road', y='Price',
                 ax=ax2_access, color='darkgreen', marker='o', linewidth=2)
    ax2_access.set_ylabel('Gi√° trung b√¨nh (VND)', color='darkgreen')
    ax2_access.tick_params(axis='y', colors='darkgreen')

    # Th√™m gi√° tr·ªã trung b√¨nh l√™n ƒë∆∞·ªùng line
    for x, y in zip(access_road_avg_price['Access Road'], access_road_avg_price['Price']):
        ax2_access.annotate(f'{y:,.0f}', xy=(x, y), xytext=(0, 10),
                            textcoords='offset points', ha='center', va='bottom',
                            color='darkgreen', fontsize=8, rotation=45)

    plt.tight_layout()
    st.pyplot(fig_access)
    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi gi√° c·ªßa Frontage v√† Access Road b·ªã missing
    st.subheader("Ph√¢n ph·ªëi gi√° c·ªßa Frontage v√† Access Road b·ªã missing")
    missing_frontage_data = data[data['Frontage'].isnull()]
    missing_access_road_data = data[data['Access Road'].isnull()]
    fig_missing, ax_missing = plt.subplots(1, 2, figsize=(14, 6))
    sns.histplot(missing_frontage_data['Price'], bins=30, kde=True,
                 ax=ax_missing[0], color='skyblue')
    ax_missing[0].set_title(
        "Ph√¢n ph·ªëi gi√° nh√† khi Frontage b·ªã missing")
    ax_missing[0].set_xlabel("Gi√° nh√† (VND)")
    ax_missing[0].set_ylabel("T·∫ßn su·∫•t")
    sns.histplot(missing_access_road_data['Price'], bins=30, kde=True,
                 ax=ax_missing[1], color='lightgreen')
    ax_missing[1].set_title(
        "Ph√¢n ph·ªëi gi√° nh√† khi Access Road b·ªã missing")
    ax_missing[1].set_xlabel("Gi√° nh√† (VND)")
    ax_missing[1].set_ylabel("T·∫ßn su·∫•t")
    plt.tight_layout()
    st.pyplot(fig_missing)
    # X·ª≠ l√Ω missing values c·ªßa Frontage v√† Access Road
    st.markdown("### üõ†Ô∏è X·ª≠ l√Ω missing values c·ªßa Frontage v√† Access Road"
                )
    st.warning(
        "S·ªë l∆∞·ª£ng missing values c·ªßa Frontage v√† Access Road qu√° l·ªõn v√† kh√¥ng c√≥ c∆° s·ªü ƒë·ªÉ fill data, s·∫Ω x√≥a 2 c·ªôt n√†y.")
    data_geo = data_geo.drop(columns=['Frontage', 'Access Road'])
    # Hi·ªÉn th·ªã l·∫°i d·ªØ li·ªáu sau khi x√≥a
    st.write("üìã D·ªØ li·ªáu sau khi x√≥a:")
    st.dataframe(data_geo)

# X·ª≠ l√Ω Floor
    toc.header("üè¢ X·ª≠ l√Ω s·ªë t·∫ßng (Floor)"
               )
    # Hi·ªÉn th·ªã s·ªë li·ªáu duy nh·∫•t c·ªßa Floor
    toc.subheader("S·ªë t·∫ßng (Floor)")
    st.write(data_geo['Floors'].value_counts())
    # S·ªë l∆∞·ª£ng missing values c·ªßa Floor
    missing_floor = data_geo['Floors'].isnull().sum()
    st.write(f"S·ªë l∆∞·ª£ng missing values c·ªßa Floor: {missing_floor}")
    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi c·ªßa Floor v√† line gi√° tr·ªã c·ªßa nh√† trung b√¨nh n·∫øu c√πng trong m·ªôt Floor
    # T·∫°o DataFrame ch·ª©a gi√° trung b√¨nh theo Floor
    floor_avg_price = data_geo.groupby(
        'Floors')['Price'].mean().reset_index()
    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi Floor v√† gi√° trung b√¨nh
    toc.subheader("Ph√¢n ph·ªëi c·ªßa s·ªë t·∫ßng v√† gi√° trung b√¨nh")
    fig_floor, ax_floor = plt.subplots(figsize=(12, 6))
    # V·∫Ω countplot (ph√¢n ph·ªëi)
    sns.countplot(x='Floors', data=data_geo, ax=ax_floor,
                  alpha=0.7, color='skyblue')
    ax_floor.set_title('Ph√¢n ph·ªëi c·ªßa s·ªë t·∫ßng v√† gi√° nh√† trung b√¨nh')
    ax_floor.set_xlabel('S·ªë t·∫ßng')
    ax_floor.set_ylabel('S·ªë l∆∞·ª£ng')
    # T·∫°o tr·ª•c th·ª© hai cho gi√° trung b√¨nh
    ax2_floor = ax_floor.twinx()
    # V·∫Ω line plot cho gi√° trung b√¨nh
    sns.lineplot(data=floor_avg_price, x='Floors', y='Price',
                 ax=ax2_floor, color='red', marker='o', linewidth=2)
    ax2_floor.set_ylabel('Gi√° trung b√¨nh (VND)', color='red')
    ax2_floor.tick_params(axis='y', colors='red')
    # Th√™m gi√° tr·ªã trung b√¨nh l√™n ƒë∆∞·ªùng line
    for x, y in zip(floor_avg_price['Floors'], floor_avg_price['Price']):
        ax2_floor.annotate(f'{y:,.0f}', xy=(x, y), xytext=(0, 10),
                           textcoords='offset points', ha='center', va='bottom',
                           color='red', fontsize=8, rotation=45)
    plt.tight_layout()
    st.pyplot(fig_floor)
    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi gi√° c·ªßa Floor b·ªã missing
    toc.subheader("Ph√¢n ph·ªëi gi√° c·ªßa s·ªë t·∫ßng b·ªã missing")
    missing_floor_data = data_geo[data_geo['Floors'].isnull()]
    fig_missing_floor, ax_missing_floor = plt.subplots(figsize=(8, 6))
    sns.histplot(missing_floor_data['Price'], bins=30, kde=True,
                 ax=ax_missing_floor, color='skyblue')
    ax_missing_floor.set_title("Ph√¢n ph·ªëi gi√° nh√† khi s·ªë t·∫ßng b·ªã missing")
    ax_missing_floor.set_xlabel("Gi√° nh√† (VND)")
    ax_missing_floor.set_ylabel("T·∫ßn su·∫•t")
    plt.tight_layout()
    st.pyplot(fig_missing_floor)
    # X·ª≠ l√Ω missing values c·ªßa Floor
    toc.subheader("üõ†Ô∏è X·ª≠ l√Ω missing values c·ªßa s·ªë t·∫ßng")

    # T·∫°o b·∫£n sao ƒë·ªÉ x·ª≠ l√Ω
    data_floor_processed = data_geo.copy()

    # 1. Ph√¢n chia gi√° nh√† th√†nh c√°c bins (kho·∫£ng gi√°: 0‚Äì3, 3‚Äì6, 6‚Äì9, v.v.)
    toc.header_h4("1. Ph√¢n chia gi√° nh√† th√†nh c√°c bins")

    # T·∫°o bins theo t·ª∑ VND (0-3, 3-6, 6-9, ...)
    max_price = data_floor_processed['Price'].max()
    bin_size = 3  # 3 t·ª∑ VND m·ªói bin
    bins = list(range(0, int(max_price) + bin_size, bin_size))

    # T·∫°o labels cho bins
    bin_labels = []
    for i in range(len(bins)-1):
        bin_labels.append(f"{bins[i]}-{bins[i+1]} t·ª∑")

    # Th√™m c·ªôt price_bin
    data_floor_processed['price_bin'] = pd.cut(data_floor_processed['Price'],
                                               bins=bins,
                                               labels=bin_labels,
                                               include_lowest=True)

    # Hi·ªÉn th·ªã ph√¢n ph·ªëi c·ªßa bins
    st.write("**Ph√¢n ph·ªëi gi√° nh√† theo bins:**")
    bin_counts = data_floor_processed['price_bin'].value_counts().sort_index()
    st.write(bin_counts)

    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi bins
    fig_bins, ax_bins = plt.subplots(figsize=(12, 6))
    bin_counts.plot(kind='bar', ax=ax_bins, color='skyblue')
    ax_bins.set_title('Ph√¢n ph·ªëi s·ªë l∆∞·ª£ng nh√† theo kho·∫£ng gi√°')
    ax_bins.set_xlabel('Kho·∫£ng gi√° (t·ª∑ VND)')
    ax_bins.set_ylabel('S·ªë l∆∞·ª£ng')
    ax_bins.tick_params(axis='x', rotation=45)
    plt.tight_layout()
    st.pyplot(fig_bins)

    # 2. V·ªõi m·ªói bin, t√≠nh mode ho·∫∑c median s·ªë t·∫ßng c·ªßa c√°c b·∫£n ghi ƒë√£ bi·∫øt
    toc.header_h4("2. T√≠nh to√°n th·ªëng k√™ s·ªë t·∫ßng cho m·ªói bin")

    # T√≠nh mode v√† median cho m·ªói bin (ch·ªâ v·ªõi c√°c gi√° tr·ªã kh√¥ng null)
    bin_stats = []

    for bin_name in bin_labels:
        bin_data = data_floor_processed[data_floor_processed['price_bin'] == bin_name]
        floors_in_bin = bin_data['Floors'].dropna()

        if len(floors_in_bin) > 0:
            # T√≠nh mode (gi√° tr·ªã xu·∫•t hi·ªán nhi·ªÅu nh·∫•t)
            mode_value = floors_in_bin.mode()
            mode = mode_value.iloc[0] if len(
                mode_value) > 0 else floors_in_bin.median()

            # T√≠nh median
            median = floors_in_bin.median()

            # ƒê·∫øm s·ªë records c√≥ v√† thi·∫øu floor
            total_records = len(bin_data)
            known_floors = len(floors_in_bin)
            missing_floors = total_records - known_floors

            bin_stats.append({
                'Bin': bin_name,
                'Total_Records': total_records,
                'Known_Floors': known_floors,
                'Missing_Floors': missing_floors,
                'Mode': mode,
                'Median': median,
                'Fill_Value': mode  # S·ª≠ d·ª•ng mode ƒë·ªÉ fill
            })
        else:
            # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu floor n√†o trong bin n√†y, d√πng median t·ªïng th·ªÉ
            overall_median = data_floor_processed['Floors'].median()
            bin_stats.append({
                'Bin': bin_name,
                'Total_Records': len(bin_data),
                'Known_Floors': 0,
                'Missing_Floors': len(bin_data),
                'Mode': overall_median,
                'Median': overall_median,
                'Fill_Value': overall_median
            })

    # Hi·ªÉn th·ªã b·∫£ng th·ªëng k√™
    stats_df = pd.DataFrame(bin_stats)
    st.write("**Th·ªëng k√™ s·ªë t·∫ßng theo t·ª´ng bin:**")
    st.dataframe(stats_df)

    # 3. G√°n gi√° tr·ªã t∆∞∆°ng ·ª©ng cho c√°c b·∫£n ghi thi·∫øu s·ªë t·∫ßng trong kho·∫£ng gi√° ƒë√≥
    toc.header_h4("3. ƒêi·ªÅn gi√° tr·ªã thi·∫øu cho s·ªë t·∫ßng")

    # T·∫°o dictionary mapping t·ª´ bin sang fill value
    bin_fill_map = dict(zip(stats_df['Bin'], stats_df['Fill_Value']))

    # ƒêi·ªÅn gi√° tr·ªã thi·∫øu
    missing_floors_mask = data_floor_processed['Floors'].isnull()
    filled_count = 0

    for idx, row in data_floor_processed[missing_floors_mask].iterrows():
        bin_name = row['price_bin']
        if bin_name in bin_fill_map:
            data_floor_processed.loc[idx, 'Floors'] = bin_fill_map[bin_name]
            filled_count += 1

    st.success(f"ƒê√£ ƒëi·ªÅn {filled_count} gi√° tr·ªã thi·∫øu cho c·ªôt Floors")

    # So s√°nh tr∆∞·ªõc v√† sau khi ƒëi·ªÅn
    col1, col2 = st.columns(2)

    with col1:
        st.write("**Tr∆∞·ªõc khi ƒëi·ªÅn:**")
        st.write(f"S·ªë gi√° tr·ªã thi·∫øu: {data_geo['Floors'].isnull().sum()}")
        st.write(f"T·ªïng s·ªë records: {len(data_geo)}")

    with col2:
        st.write("**Sau khi ƒëi·ªÅn:**")
        st.write(
            f"S·ªë gi√° tr·ªã thi·∫øu: {data_floor_processed['Floors'].isnull().sum()}")
        st.write(f"T·ªïng s·ªë records: {len(data_floor_processed)}")

    # Bi·ªÉu ƒë·ªì so s√°nh ph√¢n ph·ªëi s·ªë t·∫ßng tr∆∞·ªõc v√† sau khi ƒëi·ªÅn
    fig_compare, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

    # Tr∆∞·ªõc khi ƒëi·ªÅn
    data_geo['Floors'].value_counts().sort_index().plot(
        kind='bar', ax=ax1, color='skyblue')
    ax1.set_title('Ph√¢n ph·ªëi s·ªë t·∫ßng TR∆Ø·ªöC khi ƒëi·ªÅn')
    ax1.set_xlabel('S·ªë t·∫ßng')
    ax1.set_ylabel('S·ªë l∆∞·ª£ng')

    # Sau khi ƒëi·ªÅn
    data_floor_processed['Floors'].value_counts().sort_index().plot(
        kind='bar', ax=ax2, color='lightgreen')
    ax2.set_title('Ph√¢n ph·ªëi s·ªë t·∫ßng SAU khi ƒëi·ªÅn')
    ax2.set_xlabel('S·ªë t·∫ßng')
    ax2.set_ylabel('S·ªë l∆∞·ª£ng')

    plt.tight_layout()
    st.pyplot(fig_compare)

    # Hi·ªÉn th·ªã d·ªØ li·ªáu cu·ªëi c√πng
    st.write("üìã **D·ªØ li·ªáu sau khi x·ª≠ l√Ω missing values c·ªßa Floors:**")
    st.dataframe(data_floor_processed)

    # C·∫≠p nh·∫≠t data_geo v·ªõi d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
    data_geo = data_floor_processed.copy()

# X·ª≠ l√Ω s·ªë ph√≤ng t·∫Øm

    toc.header("üöΩ X·ª≠ l√Ω s·ªë ph√≤ng t·∫Øm (Bathrooms)")
    # Hi·ªÉn th·ªã s·ªë li·ªáu duy nh·∫•t c·ªßa Bathrooms
    toc.subheader("S·ªë ph√≤ng t·∫Øm (Bathrooms)")
    st.write(data_geo['Bathrooms'].value_counts())
    # S·ªë l∆∞·ª£ng missing values c·ªßa Bathrooms
    missing_bathrooms = data_geo['Bathrooms'].isnull().sum()
    st.write(f"S·ªë l∆∞·ª£ng missing values c·ªßa Bathrooms: {missing_bathrooms}")

    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi c·ªßa Bathrooms v√† line gi√° tr·ªã c·ªßa nh√† trung b√¨nh n·∫øu c√πng trong m·ªôt Bathrooms
    # T·∫°o DataFrame ch·ª©a gi√° trung b√¨nh theo Bathrooms
    bathrooms_avg_price = data_geo.groupby(
        'Bathrooms')['Price'].mean().reset_index()
    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi Bathrooms v√† gi√° trung b√¨nh
    toc.subheader("Ph√¢n ph·ªëi c·ªßa s·ªë ph√≤ng t·∫Øm v√† gi√° trung b√¨nh")
    fig_bathrooms, ax_bathrooms = plt.subplots(figsize=(12, 6))
    # V·∫Ω countplot (ph√¢n ph·ªëi)
    sns.countplot(x='Bathrooms', data=data_geo, ax=ax_bathrooms,
                  alpha=0.7, color='skyblue')
    ax_bathrooms.set_title('Ph√¢n ph·ªëi c·ªßa s·ªë ph√≤ng t·∫Øm v√† gi√° nh√† trung b√¨nh')
    ax_bathrooms.set_xlabel('S·ªë ph√≤ng t·∫Øm')
    ax_bathrooms.set_ylabel('S·ªë l∆∞·ª£ng')
    # T·∫°o tr·ª•c th·ª© hai cho gi√° trung b√¨nh
    ax2_bathrooms = ax_bathrooms.twinx()
    # V·∫Ω line plot cho gi√° trung b√¨nh
    sns.lineplot(data=bathrooms_avg_price, x='Bathrooms', y='Price',
                 ax=ax2_bathrooms, color='red', marker='o', linewidth=2)
    ax2_bathrooms.set_ylabel('Gi√° trung b√¨nh (VND)', color='red')
    ax2_bathrooms.tick_params(axis='y', colors='red')
    # Th√™m gi√° tr·ªã trung b√¨nh l√™n ƒë∆∞·ªùng line
    for x, y in zip(bathrooms_avg_price['Bathrooms'], bathrooms_avg_price['Price']):
        ax2_bathrooms.annotate(f'{y:,.0f}', xy=(x, y), xytext=(0, 10),
                               textcoords='offset points', ha='center', va='bottom',
                               color='red', fontsize=8, rotation=45)
    plt.tight_layout()
    st.pyplot(fig_bathrooms)
    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi gi√° c·ªßa Bathrooms b·ªã missing
    toc.subheader("Ph√¢n ph·ªëi gi√° c·ªßa s·ªë ph√≤ng t·∫Øm b·ªã missing")
    missing_bathrooms_data = data_geo[data_geo['Bathrooms'].isnull()]
    fig_missing_bathrooms, ax_missing_bathrooms = plt.subplots(figsize=(8, 6))
    sns.histplot(missing_bathrooms_data['Price'], bins=30, kde=True,
                 ax=ax_missing_bathrooms, color='skyblue')
    ax_missing_bathrooms.set_title(
        "Ph√¢n ph·ªëi gi√° nh√† khi s·ªë ph√≤ng t·∫Øm b·ªã missing")
    ax_missing_bathrooms.set_xlabel("Gi√° nh√† (VND)")
    ax_missing_bathrooms.set_ylabel("T·∫ßn su·∫•t")
    plt.tight_layout()
    st.pyplot(fig_missing_bathrooms)
    # X·ª≠ l√Ω missing values c·ªßa Bathrooms
    st.markdown("### üõ†Ô∏è X·ª≠ l√Ω missing values c·ªßa s·ªë ph√≤ng t·∫Øm")
    # T·∫°o b·∫£n sao ƒë·ªÉ x·ª≠ l√Ω
    data_bathrooms_processed = data_geo.copy()
    # 1. Ph√¢n chia gi√° nh√† th√†nh c√°c bins (kho·∫£ng gi√°: 0‚Äì3, 3‚Äì6, 6‚Äì9, v.v.)
    toc.header_h4("1. Ph√¢n chia gi√° nh√† th√†nh c√°c bins")
    # T·∫°o bins theo t·ª∑ VND (0-3, 3-6, 6-9, ...)
    max_price = data_bathrooms_processed['Price'].max()
    bin_size = 1
    bins = list(range(0, int(max_price) + bin_size, bin_size))
    # T·∫°o labels cho bins
    bin_labels = []
    for i in range(len(bins)-1):
        bin_labels.append(f"{bins[i]}-{bins[i+1]} t·ª∑")
    # Th√™m c·ªôt price_bin

    data_bathrooms_processed['price_bin'] = pd.cut(data_bathrooms_processed['Price'],
                                                   bins=bins,
                                                   labels=bin_labels,
                                                   include_lowest=True)
    # Hi·ªÉn th·ªã ph√¢n ph·ªëi c·ªßa bins
    st.write("**Ph√¢n ph·ªëi gi√° nh√† theo bins:**")
    bin_counts = data_bathrooms_processed['price_bin'].value_counts(
    ).sort_index()
    st.write(bin_counts)
    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi bins

    fig_bins_bathrooms, ax_bins_bathrooms = plt.subplots(figsize=(12, 6))
    bin_counts.plot(kind='bar', ax=ax_bins_bathrooms, color='skyblue')
    ax_bins_bathrooms.set_title('Ph√¢n ph·ªëi s·ªë l∆∞·ª£ng nh√† theo kho·∫£ng gi√°')
    ax_bins_bathrooms.set_xlabel('Kho·∫£ng gi√° (t·ª∑ VND)')
    ax_bins_bathrooms.set_ylabel('S·ªë l∆∞·ª£ng')
    ax_bins_bathrooms.tick_params(axis='x', rotation=45)
    plt.tight_layout()
    st.pyplot(fig_bins_bathrooms)
    # 2. V·ªõi m·ªói bin, t√≠nh mode ho·∫∑c median s·ªë ph√≤ng t·∫Øm c·ªßa c√°c b·∫£n ghi ƒë√£ bi·∫øt
    toc.header_h4("2. T√≠nh to√°n th·ªëng k√™ s·ªë ph√≤ng t·∫Øm cho m·ªói bin")
    # T√≠nh mode v√† median cho m·ªói bin (ch·ªâ v·ªõi c√°c gi√° tr·ªã kh√¥ng null)
    bin_stats_bathrooms = []

    for bin_name in bin_labels:
        bin_data = data_bathrooms_processed[data_bathrooms_processed['price_bin'] == bin_name]
        bathrooms_in_bin = bin_data['Bathrooms'].dropna()

        if len(bathrooms_in_bin) > 0:
            # T√≠nh mode (gi√° tr·ªã xu·∫•t hi·ªán nhi·ªÅu nh·∫•t)
            mode_value = bathrooms_in_bin.mode()
            mode = mode_value.iloc[0] if len(
                mode_value) > 0 else bathrooms_in_bin.median()

            # T√≠nh median
            median = bathrooms_in_bin.median()

            # ƒê·∫øm s·ªë records c√≥ v√† thi·∫øu bathroom
            total_records = len(bin_data)
            known_bathrooms = len(bathrooms_in_bin)
            missing_bathrooms = total_records - known_bathrooms

            bin_stats_bathrooms.append({
                'Bin': bin_name,
                'Total_Records': total_records,
                'Known_Bathrooms': known_bathrooms,
                'Missing_Bathrooms': missing_bathrooms,
                'Mode': mode,
                'Median': median,
                'Fill_Value': mode  # S·ª≠ d·ª•ng mode ƒë·ªÉ fill
            })
        else:
            # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu bathroom n√†o trong bin n√†y, d√πng median t·ªïng th·ªÉ
            overall_median = data_bathrooms_processed['Bathrooms'].median()
            bin_stats_bathrooms.append({
                'Bin': bin_name,
                'Total_Records': len(bin_data),
                'Known_Bathrooms': 0,
                'Missing_Bathrooms': len(bin_data),
                'Mode': overall_median,
                'Median': overall_median,
                'Fill_Value': overall_median
            })
    # Hi·ªÉn th·ªã b·∫£ng th·ªëng k√™
    stats_df_bathrooms = pd.DataFrame(bin_stats_bathrooms)
    st.write("**Th·ªëng k√™ s·ªë ph√≤ng t·∫Øm theo t·ª´ng bin:**")
    st.dataframe(stats_df_bathrooms)
    # 3. G√°n gi√° tr·ªã t∆∞∆°ng ·ª©ng cho c√°c b·∫£n ghi thi·∫øu s·ªë ph√≤ng t·∫Øm trong kho·∫£ng gi√° ƒë√≥
    toc.header_h4("3. ƒêi·ªÅn gi√° tr·ªã thi·∫øu cho s·ªë ph√≤ng t·∫Øm")
    # T·∫°o dictionary mapping t·ª´ bin sang fill value
    bin_fill_map_bathrooms = dict(
        zip(stats_df_bathrooms['Bin'], stats_df_bathrooms['Fill_Value']))
    # ƒêi·ªÅn gi√° tr·ªã thi·∫øu
    missing_bathrooms_mask = data_bathrooms_processed['Bathrooms'].isnull()
    filled_count_bathrooms = 0
    for idx, row in data_bathrooms_processed[missing_bathrooms_mask].iterrows():
        bin_name = row['price_bin']
        if bin_name in bin_fill_map_bathrooms:
            data_bathrooms_processed.loc[idx,
                                         'Bathrooms'] = bin_fill_map_bathrooms[bin_name]
            filled_count_bathrooms += 1
    st.success(
        f"ƒê√£ ƒëi·ªÅn {filled_count_bathrooms} gi√° tr·ªã thi·∫øu cho c·ªôt Bathrooms")
    # So s√°nh tr∆∞·ªõc v√† sau khi ƒëi·ªÅn
    col1, col2 = st.columns(2)
    with col1:
        st.write("**Tr∆∞·ªõc khi ƒëi·ªÅn:**")
        st.write(f"S·ªë gi√° tr·ªã thi·∫øu: {data_geo['Bathrooms'].isnull().sum()}")
        st.write(f"T·ªïng s·ªë records: {len(data_geo)}")
    with col2:
        st.write("**Sau khi ƒëi·ªÅn:**")
        st.write(
            f"S·ªë gi√° tr·ªã thi·∫øu: {data_bathrooms_processed['Bathrooms'].isnull().sum()}")
        st.write(f"T·ªïng s·ªë records: {len(data_bathrooms_processed)}")
    # Bi·ªÉu ƒë·ªì so s√°nh ph√¢n ph·ªëi s·ªë ph√≤ng t·∫Øm tr∆∞·ªõc v√† sau khi ƒëi·ªÅn
    fig_compare_bathrooms, (ax1_bathrooms, ax2_bathrooms) = plt.subplots(
        1, 2, figsize=(15, 6))
    # Tr∆∞·ªõc khi ƒëi·ªÅn
    data_geo['Bathrooms'].value_counts().sort_index().plot(
        kind='bar', ax=ax1_bathrooms, color='skyblue')
    ax1_bathrooms.set_title('Ph√¢n ph·ªëi s·ªë ph√≤ng t·∫Øm TR∆Ø·ªöC khi ƒëi·ªÅn')
    ax1_bathrooms.set_xlabel('S·ªë ph√≤ng t·∫Øm')
    ax1_bathrooms.set_ylabel('S·ªë l∆∞·ª£ng')
    # Sau khi ƒëi·ªÅn
    data_bathrooms_processed['Bathrooms'].value_counts().sort_index().plot(
        kind='bar', ax=ax2_bathrooms, color='lightgreen')
    ax2_bathrooms.set_title('Ph√¢n ph·ªëi s·ªë ph√≤ng t·∫Øm SAU khi ƒëi·ªÅn')
    ax2_bathrooms.set_xlabel('S·ªë ph√≤ng t·∫Øm')
    ax2_bathrooms.set_ylabel('S·ªë l∆∞·ª£ng')
    plt.tight_layout()
    st.pyplot(fig_compare_bathrooms)
    # Hi·ªÉn th·ªã d·ªØ li·ªáu cu·ªëi c√πng
    st.write("üìã **D·ªØ li·ªáu sau khi x·ª≠ l√Ω missing values c·ªßa Bathrooms:**")
    st.dataframe(data_bathrooms_processed)
    # C·∫≠p nh·∫≠t data_geo v·ªõi d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
    data_geo = data_bathrooms_processed.copy()
# X·ª≠ l√Ω s·ªë ph√≤ng ng·ªß

    toc.header("üõèÔ∏è X·ª≠ l√Ω s·ªë ph√≤ng ng·ªß (Bedrooms)")
    # Hi·ªÉn th·ªã s·ªë li·ªáu duy nh·∫•t c·ªßa Bedrooms
    toc.subheader("S·ªë ph√≤ng ng·ªß (Bedrooms)")
    st.write(data_geo['Bedrooms'].value_counts())
    # S·ªë l∆∞·ª£ng missing values c·ªßa Bedrooms
    missing_bedrooms = data_geo['Bedrooms'].isnull().sum()
    st.write(f"S·ªë l∆∞·ª£ng missing values c·ªßa Bedrooms: {missing_bedrooms}")
    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi c·ªßa Bedrooms v√† line gi√° tr·ªã c·ªßa nh√† trung b√¨nh n·∫øu c√πng trong m·ªôt Bedrooms
    # T·∫°o DataFrame ch·ª©a gi√° trung b√¨nh theo Bedrooms
    bedrooms_avg_price = data_geo.groupby(
        'Bedrooms')['Price'].mean().reset_index()
    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi Bedrooms v√† gi√° trung b√¨nh
    toc.subheader("Ph√¢n ph·ªëi c·ªßa s·ªë ph√≤ng ng·ªß v√† gi√° trung b√¨nh")
    fig_bedrooms, ax_bedrooms = plt.subplots(figsize=(12, 6))
    # V·∫Ω countplot (ph√¢n ph·ªëi)
    sns.countplot(x='Bedrooms', data=data_geo, ax=ax_bedrooms,
                  alpha=0.7, color='skyblue')
    ax_bedrooms.set_title('Ph√¢n ph·ªëi c·ªßa s·ªë ph√≤ng ng·ªß v√† gi√° nh√† trung b√¨nh')
    ax_bedrooms.set_xlabel('S·ªë ph√≤ng ng·ªß')
    ax_bedrooms.set_ylabel('S·ªë l∆∞·ª£ng')
    # T·∫°o tr·ª•c th·ª© hai cho gi√° trung b√¨nh
    ax2_bedrooms = ax_bedrooms.twinx()
    # V·∫Ω line plot cho gi√° trung b√¨nh
    sns.lineplot(data=bedrooms_avg_price, x='Bedrooms', y='Price',
                 ax=ax2_bedrooms, color='red', marker='o', linewidth=2)
    ax2_bedrooms.set_ylabel('Gi√° trung b√¨nh (VND)', color='red')
    ax2_bedrooms.tick_params(axis='y', colors='red')
    # Th√™m gi√° tr·ªã trung b√¨nh l√™n ƒë∆∞·ªùng line
    for x, y in zip(bedrooms_avg_price['Bedrooms'], bedrooms_avg_price['Price']):
        ax2_bedrooms.annotate(f'{y:,.0f}', xy=(x, y), xytext=(0, 10),
                              textcoords='offset points', ha='center', va='bottom',
                              color='red', fontsize=8, rotation=45)
    plt.tight_layout()
    st.pyplot(fig_bedrooms)
    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi gi√° c·ªßa Bedrooms b·ªã missing
    toc.subheader("Ph√¢n ph·ªëi gi√° c·ªßa s·ªë ph√≤ng ng·ªß b·ªã missing")
    missing_bedrooms_data = data_geo[data_geo['Bedrooms'].isnull()]
    fig_missing_bedrooms, ax_missing_bedrooms = plt.subplots(figsize=(8, 6))
    sns.histplot(missing_bedrooms_data['Price'], bins=30, kde=True,
                 ax=ax_missing_bedrooms, color='skyblue')

    ax_missing_bedrooms.set_title(
        "Ph√¢n ph·ªëi gi√° nh√† khi s·ªë ph√≤ng ng·ªß b·ªã missing")
    ax_missing_bedrooms.set_xlabel("Gi√° nh√† (VND)")
    ax_missing_bedrooms.set_ylabel("T·∫ßn su·∫•t")

    plt.tight_layout()
    st.pyplot(fig_missing_bedrooms)
    # X·ª≠ l√Ω missing values c·ªßa Bedrooms
    toc.subheader("üõ†Ô∏è X·ª≠ l√Ω missing values c·ªßa s·ªë ph√≤ng ng·ªß")
    # T·∫°o b·∫£n sao ƒë·ªÉ x·ª≠ l√Ω
    data_bedrooms_processed = data_geo.copy()
    # 1. Ph√¢n chia gi√° nh√† th√†nh c√°c bins (kho·∫£ng gi√°: 0‚Äì3, 3‚Äì6, 6‚Äì9, v.v.)
    toc.header_h4("1. Ph√¢n chia gi√° nh√† th√†nh c√°c bins")
    # T·∫°o bins theo t·ª∑ VND (0-3, 3-6, 6-9, ...)
    max_price = data_bedrooms_processed['Price'].max()
    bin_size = 2
    bins = list(range(0, int(max_price) + bin_size, bin_size))
    # T·∫°o labels cho bins
    bin_labels = []
    for i in range(len(bins)-1):
        bin_labels.append(f"{bins[i]}-{bins[i+1]} t·ª∑")

    # Th√™m c·ªôt price_bin
    data_bedrooms_processed['price_bin'] = pd.cut(data_bedrooms_processed['Price'],
                                                  bins=bins,
                                                  labels=bin_labels,
                                                  include_lowest=True)
    # Hi·ªÉn th·ªã ph√¢n ph·ªëi c·ªßa bins
    st.write("**Ph√¢n ph·ªëi gi√° nh√† theo bins:**")
    bin_counts = data_bedrooms_processed['price_bin'].value_counts(
    ).sort_index()
    st.write(bin_counts)
    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi bins
    fig_bins_bedrooms, ax_bins_bedrooms = plt.subplots(figsize=(12, 6))
    bin_counts.plot(kind='bar', ax=ax_bins_bedrooms, color='skyblue')
    ax_bins_bedrooms.set_title('Ph√¢n ph·ªëi s·ªë l∆∞·ª£ng nh√† theo kho·∫£ng gi√°')
    ax_bins_bedrooms.set_xlabel('Kho·∫£ng gi√° (t·ª∑ VND)')
    ax_bins_bedrooms.set_ylabel('S·ªë l∆∞·ª£ng')
    ax_bins_bedrooms.tick_params(axis='x', rotation=45)
    plt.tight_layout()
    st.pyplot(fig_bins_bedrooms)
    # 2. V·ªõi m·ªói bin, t√≠nh mode ho·∫∑c median s·ªë ph√≤ng ng·ªß c·ªßa c√°c b·∫£n ghi ƒë√£ bi·∫øt
    toc.header_h4("2. T√≠nh to√°n th·ªëng k√™ s·ªë ph√≤ng ng·ªß cho m·ªói bin")
    # T√≠nh mode v√† median cho m·ªói bin (ch·ªâ v·ªõi c√°c gi√° tr·ªã kh√¥ng null)
    bin_stats_bedrooms = []
    for bin_name in bin_labels:
        bin_data = data_bedrooms_processed[data_bedrooms_processed['price_bin'] == bin_name]
        bedrooms_in_bin = bin_data['Bedrooms'].dropna()

        if len(bedrooms_in_bin) > 0:
            # T√≠nh mode (gi√° tr·ªã xu·∫•t hi·ªán nhi·ªÅu nh·∫•t)
            mode_value = bedrooms_in_bin.mode()
            mode = mode_value.iloc[0] if len(
                mode_value) > 0 else bedrooms_in_bin.median()

            # T√≠nh median
            median = bedrooms_in_bin.median()

            # ƒê·∫øm s·ªë records c√≥ v√† thi·∫øu bedroom
            total_records = len(bin_data)
            known_bedrooms = len(bedrooms_in_bin)
            missing_bedrooms = total_records - known_bedrooms

            bin_stats_bedrooms.append({
                'Bin': bin_name,
                'Total_Records': total_records,
                'Known_Bedrooms': known_bedrooms,
                'Missing_Bedrooms': missing_bedrooms,
                'Mode': mode,
                'Median': median,
                'Fill_Value': mode  # S·ª≠ d·ª•ng mode ƒë·ªÉ fill
            })
        else:
            # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu bedroom n√†o trong bin n√†y, d√πng median t·ªïng th·ªÉ
            overall_median = data_bedrooms_processed['Bedrooms'].median()
            bin_stats_bedrooms.append({
                'Bin': bin_name,
                'Total_Records': len(bin_data),
                'Known_Bedrooms': 0,
                'Missing_Bedrooms': len(bin_data),
                'Mode': overall_median,
                'Median': overall_median,
                'Fill_Value': overall_median
            })
    # Hi·ªÉn th·ªã b·∫£ng th·ªëng k√™
    stats_df_bedrooms = pd.DataFrame(bin_stats_bedrooms)
    st.write("**Th·ªëng k√™ s·ªë ph√≤ng ng·ªß theo t·ª´ng bin:**")
    st.dataframe(stats_df_bedrooms)
    # 3. G√°n gi√° tr·ªã t∆∞∆°ng ·ª©ng cho c√°c b·∫£n ghi thi·∫øu s·ªë ph√≤ng ng·ªß trong kho·∫£ng gi√° ƒë√≥
    toc.header_h4("3. ƒêi·ªÅn gi√° tr·ªã thi·∫øu cho s·ªë ph√≤ng ng·ªß")
    # T·∫°o dictionary mapping t·ª´ bin sang fill value
    bin_fill_map_bedrooms = dict(
        zip(stats_df_bedrooms['Bin'], stats_df_bedrooms['Fill_Value']))
    # ƒêi·ªÅn gi√° tr·ªã thi·∫øu
    missing_bedrooms_mask = data_bedrooms_processed['Bedrooms'].isnull()
    filled_count_bedrooms = 0
    for idx, row in data_bedrooms_processed[missing_bedrooms_mask].iterrows():
        bin_name = row['price_bin']
        if bin_name in bin_fill_map_bedrooms:
            data_bedrooms_processed.loc[idx,
                                        'Bedrooms'] = bin_fill_map_bedrooms[bin_name]
            filled_count_bedrooms += 1
    st.success(
        f"ƒê√£ ƒëi·ªÅn {filled_count_bedrooms} gi√° tr·ªã thi·∫øu cho c·ªôt Bedrooms")
    # So s√°nh tr∆∞·ªõc v√† sau khi ƒëi·ªÅn
    col1, col2 = st.columns(2)
    with col1:
        st.write("**Tr∆∞·ªõc khi ƒëi·ªÅn:**")
        st.write(f"S·ªë gi√° tr·ªã thi·∫øu: {data_geo['Bedrooms'].isnull().sum()}")
        st.write(f"T·ªïng s·ªë records: {len(data_geo)}")
    with col2:
        st.write("**Sau khi ƒëi·ªÅn:**")
        st.write(
            f"S·ªë gi√° tr·ªã thi·∫øu: {data_bedrooms_processed['Bedrooms'].isnull().sum()}")
        st.write(f"T·ªïng s·ªë records: {len(data_bedrooms_processed)}")
    # Bi·ªÉu ƒë·ªì so s√°nh ph√¢n ph·ªëi s·ªë ph√≤ng ng·ªß tr∆∞·ªõc v√† sau khi ƒëi·ªÅn
    fig_compare_bedrooms, (ax1_bedrooms, ax2_bedrooms) = plt.subplots(
        1, 2, figsize=(15, 6))
    # Tr∆∞·ªõc khi ƒëi·ªÅn
    data_geo['Bedrooms'].value_counts().sort_index().plot(
        kind='bar', ax=ax1_bedrooms, color='skyblue')
    ax1_bedrooms.set_title('Ph√¢n ph·ªëi s·ªë ph√≤ng ng·ªß TR∆Ø·ªöC khi ƒëi·ªÅn')
    ax1_bedrooms.set_xlabel('S·ªë ph√≤ng ng·ªß')
    ax1_bedrooms.set_ylabel('S·ªë l∆∞·ª£ng')
    # Sau khi ƒëi·ªÅn
    data_bedrooms_processed['Bedrooms'].value_counts().sort_index().plot(
        kind='bar', ax=ax2_bedrooms, color='lightgreen')
    ax2_bedrooms.set_title('Ph√¢n ph·ªëi s·ªë ph√≤ng ng·ªß SAU khi ƒëi·ªÅn')
    ax2_bedrooms.set_xlabel('S·ªë ph√≤ng ng·ªß')
    ax2_bedrooms.set_ylabel('S·ªë l∆∞·ª£ng')
    plt.tight_layout()
    st.pyplot(fig_compare_bedrooms)
    # Hi·ªÉn th·ªã d·ªØ li·ªáu cu·ªëi c√πng
    st.write("üìã **D·ªØ li·ªáu sau khi x·ª≠ l√Ω missing values c·ªßa Bedrooms:**")
    st.dataframe(data_bedrooms_processed)
    # C·∫≠p nh·∫≠t data_geo v·ªõi d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
    data_geo = data_bedrooms_processed.copy().drop(columns=['price_bin'])

# X·ª≠ l√Ω Furntiure state
    toc.header("ü™ë X·ª≠ l√Ω t√¨nh tr·∫°ng n·ªôi th·∫•t (Furniture state)")

    # Hi·ªÉn th·ªã s·ªë li·ªáu duy nh·∫•t c·ªßa Furniture state
    toc.subheader("T√¨nh tr·∫°ng n·ªôi th·∫•t (Furniture state)")
    furniture_state_counts = data_geo['Furniture state'].value_counts()
    st.write(furniture_state_counts)

    # S·ªë l∆∞·ª£ng missing values c·ªßa Furniture state
    missing_furniture = data_geo['Furniture state'].isnull().sum()
    st.write(
        f"S·ªë l∆∞·ª£ng missing values c·ªßa Furniture state: {missing_furniture}")

    # X·ª≠ l√Ω missing values v√† encoding c·ªßa Furniture state
    toc.subheader("üõ†Ô∏è X·ª≠ l√Ω v√† m√£ h√≥a t√¨nh tr·∫°ng n·ªôi th·∫•t")

    # T·∫°o b·∫£n sao ƒë·ªÉ x·ª≠ l√Ω
    data_furniture_processed = data_geo.copy()

    st.write("**Tr∆∞·ªõc khi x·ª≠ l√Ω:**")
    before_furniture_counts = data_furniture_processed['Furniture state'].value_counts(
    )
    st.write(before_furniture_counts)

    # Chuy·ªÉn ƒë·ªïi v·ªÅ ch·ªØ th∆∞·ªùng
    data_furniture_processed['Furniture state'] = data_furniture_processed['Furniture state'].str.lower(
    )

    # M√£ h√≥a c√°c gi√° tr·ªã
    st.info("""
    **Chi·∫øn l∆∞·ª£c m√£ h√≥a:**
    - Full (ƒë·∫ßy ƒë·ªß n·ªôi th·∫•t): 2
    - Basic (n·ªôi th·∫•t c∆° b·∫£n): 1  
    - Missing/None (kh√¥ng n·ªôi th·∫•t): 0
    """)

    data_furniture_processed['Furniture state'] = data_furniture_processed['Furniture state'].replace({
        'full': 2,
        'basic': 1,
    })

    # ƒêi·ªÅn gi√° tr·ªã missing v·ªõi 0 (kh√¥ng n·ªôi th·∫•t)
    data_furniture_processed['Furniture state'] = data_furniture_processed['Furniture state'].fillna(
        0)

    st.write("**Sau khi x·ª≠ l√Ω:**")
    after_furniture_counts = data_furniture_processed['Furniture state'].value_counts(
    )
    st.write(after_furniture_counts)

    # So s√°nh tr∆∞·ªõc v√† sau khi x·ª≠ l√Ω
    col1, col2 = st.columns(2)

    with col1:
        st.write("**Tr∆∞·ªõc khi x·ª≠ l√Ω:**")
        st.write(
            f"S·ªë gi√° tr·ªã thi·∫øu: {data_geo['Furniture state'].isnull().sum()}")
        st.write(f"T·ªïng s·ªë records: {len(data_geo)}")

    with col2:
        st.write("**Sau khi x·ª≠ l√Ω:**")
        st.write(
            f"S·ªë gi√° tr·ªã thi·∫øu: {data_furniture_processed['Furniture state'].isnull().sum()}")
        st.write(f"T·ªïng s·ªë records: {len(data_furniture_processed)}")
    # Hi·ªÉn th·ªã d·ªØ li·ªáu cu·ªëi c√πng
    st.write("üìã **D·ªØ li·ªáu sau khi x·ª≠ l√Ω t√¨nh tr·∫°ng n·ªôi th·∫•t:**")
    st.dataframe(data_furniture_processed)

    # C·∫≠p nh·∫≠t data_geo v·ªõi d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
    data_geo = data_furniture_processed.copy()

# X·ª≠ l√Ω t√¨nh tr·∫°ng ph√°p l√Ω (Legal status)
    toc.header("‚öñÔ∏è X·ª≠ l√Ω t√¨nh tr·∫°ng ph√°p l√Ω (Legal status)")

    # Hi·ªÉn th·ªã s·ªë li·ªáu duy nh·∫•t c·ªßa Legal status
    toc.subheader("T√¨nh tr·∫°ng ph√°p l√Ω (Legal status)")
    legal_status_counts = data_geo['Legal status'].value_counts()
    st.write(legal_status_counts)

    # S·ªë l∆∞·ª£ng missing values c·ªßa Legal status
    missing_legal = data_geo['Legal status'].isnull().sum()
    st.write(f"S·ªë l∆∞·ª£ng missing values c·ªßa Legal status: {missing_legal}")

    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi t√¨nh tr·∫°ng ph√°p l√Ω v√† gi√° trung b√¨nh
    legal_avg_price = data_geo.groupby('Legal status')[
        'Price'].mean().reset_index()

    # X·ª≠ l√Ω missing values v√† one-hot encoding c·ªßa Legal status
    toc.subheader("üõ†Ô∏è X·ª≠ l√Ω v√† m√£ h√≥a t√¨nh tr·∫°ng ph√°p l√Ω (One-Hot Encoding)")

    # T·∫°o b·∫£n sao ƒë·ªÉ x·ª≠ l√Ω
    data_legal_processed = data_geo.copy()

    st.write("**Tr∆∞·ªõc khi x·ª≠ l√Ω:**")
    before_legal_counts = data_legal_processed['Legal status'].value_counts()
    st.write(before_legal_counts)
    st.write(
        f"S·ªë gi√° tr·ªã thi·∫øu: {data_legal_processed['Legal status'].isnull().sum()}")

    # One-hot encoding cho Legal status
    st.info("""
    **Chi·∫øn l∆∞·ª£c m√£ h√≥a (One-Hot Encoding):**
    - Legal_status_have_certificate: 1 n·∫øu "Have certificate", 0 n·∫øu kh√°c (bao g·ªìm c·∫£ missing)
    - Legal_status_sales_contract: 1 n·∫øu "Sale contract", 0 n·∫øu kh√°c (bao g·ªìm c·∫£ missing)
    
    **L∆∞u √Ω:** N·∫øu Legal status l√† NAN/missing th√¨ c·∫£ 2 c·ªôt ƒë·ªÅu = 0
    """)

    # T·∫°o c√°c c·ªôt one-hot encoding
    data_legal_processed['Legal_status_have_certificate'] = data_legal_processed['Legal status'].apply(
        lambda x: 1 if x == 'Have certificate' else 0)
    data_legal_processed['Legal_status_sales_contract'] = data_legal_processed['Legal status'].apply(
        lambda x: 1 if x == 'Sale contract' else 0)

    # X√≥a c·ªôt g·ªëc
    data_legal_processed = data_legal_processed.drop(
        columns=['Legal status'], errors='ignore')

    st.write("**Sau khi x·ª≠ l√Ω:**")
    st.write("C√°c c·ªôt m·ªõi ƒë∆∞·ª£c t·∫°o:")
    legal_columns = ['Legal_status_have_certificate',
                     'Legal_status_sales_contract']
    for col in legal_columns:
        if col in data_legal_processed.columns:
            st.write(
                f"- {col}: {data_legal_processed[col].value_counts().to_dict()}")

    # Bi·ªÉu ƒë·ªì so s√°nh c√°c c·ªôt m·ªõi ƒë∆∞·ª£c t·∫°o
    st.subheader("Ph√¢n ph·ªëi c√°c c·ªôt t√¨nh tr·∫°ng ph√°p l√Ω sau m√£ h√≥a")
    fig_encoded_legal, axes = plt.subplots(1, 2, figsize=(15, 6))

    for i, col in enumerate(legal_columns):
        if col in data_legal_processed.columns:
            data_legal_processed[col].value_counts().plot(
                kind='bar', ax=axes[i], color=['lightcoral', 'skyblue'])
            axes[i].set_title(f'Ph√¢n ph·ªëi {col}')
            axes[i].set_xlabel('Gi√° tr·ªã')
            axes[i].set_ylabel('S·ªë l∆∞·ª£ng')
            axes[i].tick_params(axis='x', rotation=0)

    plt.tight_layout()
    st.pyplot(fig_encoded_legal)

    # T·∫°o b·∫£ng ki·ªÉm tra
    original_legal = data_geo['Legal status'].copy()
    check_df = pd.DataFrame({
        'Original_Legal_Status': original_legal,
        'Have_Certificate': data_legal_processed['Legal_status_have_certificate'],
        'Sales_Contract': data_legal_processed['Legal_status_sales_contract']
    })
    # Hi·ªÉn th·ªã d·ªØ li·ªáu cu·ªëi c√πng
    st.write("üìã **D·ªØ li·ªáu sau khi x·ª≠ l√Ω t√¨nh tr·∫°ng ph√°p l√Ω:**")
    st.dataframe(data_legal_processed)

    # C·∫≠p nh·∫≠t data_geo v·ªõi d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
    data_geo = data_legal_processed.copy()


# Button ƒë·ªÉ t·∫£i xu·ªëng d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
    toc.header("üì• T·∫£i xu·ªëng d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω")
    csv = data_geo.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="T·∫£i xu·ªëng d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω (CSV)",
        data=csv,
        file_name='processed_data.csv',
        mime='text/csv',
        key='download-csv'
    )

    # Hi·ªÉn th·ªã d·ªØ li·ªáu cu·ªëi c√πng
    st.write("üìã **D·ªØ li·ªáu cu·ªëi c√πng sau khi x·ª≠ l√Ω:**")
    st.dataframe(data_geo)
toc.generate()
